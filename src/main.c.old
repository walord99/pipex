/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bplante <bplante@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/07 12:49:27 by bplante           #+#    #+#             */
/*   Updated: 2023/11/15 15:26:23 by bplante          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "pipex.h"

char	*get_path(char **env, char **exec)
{
	char	**paths;
	char	*path;
	int		i;
	int		access_ret;

	i = 0;
	paths = ft_split(get_env(env, "PATH"), ':');
	while (paths[i])
	{
		path = ft_strjoin_free(paths[i], ft_strjoin("/", exec[0]), FREE_S2);
		access_ret = access(path, F_OK);
		if (access_ret == 0)
		{
			free_tab((void **)paths, &free);
			return (path);
		}
		free(path);
		i++;
	}
	free_tab((void **)paths, &free);
	return (NULL);
}

int	run(char **env, char **exec)
{
	char	*ptr;

	if (!ft_strchr(exec[0], '/'))
	{
		ptr = exec[0];
		exec[0] = get_path(env, exec);
		free(ptr);
	}
	if (exec[0] && access(exec[0], X_OK) == 0)
		execve(exec[0], exec, NULL);
	if (exec[0])
	{
		ft_printf_fd("pipex: %s: %s\n", 2, strerror(errno), exec[0]);
		if (errno == EACCES)
			exit(126);
		exit(1);
	}
	else
	{
		ft_printf_fd("pipex: command not found: %s\n", 2, exec[0]);
		exit(127);
	}
}

void	close_fds(int fd1, int fd2)
{
	close(fd1);
	close(fd2);
}

int	create_first_children(char **exec, char **env, int fd[2], char *file)
{
	pid_t	pid;
	int		status;
	int		fd_in;

	pid = fork();
	if (pid < 0)
	{
		perror("Failed to fork");
		return (-1);
	}
	else if (pid == 0)
	{
		// sleep(8);
		close(fd[0]);
		fd_in = open(file, O_RDONLY);
		if (fd_in < 0)
		{
			close(fd[1]);
			free_tab((void **)exec, &free);
			exit(1);
		}
		dup2(fd_in, 0);
		dup2(fd[1], 1);
		close_fds(fd_in, fd[1]);
		run(env, exec);
	}
	else
	{
		waitpid(pid, &status, 0);
		close(fd[1]);
		return (status / 256);
	}
}

int	create_second_children(char **exec, char **env, int fd[2], char *file)
{
	pid_t	pid;
	int		status;
	int		fd_out;

	pid = fork();
	if (pid < 0)
	{
		perror("Failed to fork");
		return (-1);
	}
	else if (pid == 0)
	{
		// sleep(8);
		close(fd[1]);
		fd_out = open(file, O_WRONLY | O_CREAT | O_TRUNC, 0644);
		if (fd_out < 0)
		{
			close(fd[0]);
			free_tab((void **)exec, &free);
			exit(1);
		}
		dup2(fd_out, 1);
		dup2(fd[0], 0);
		close_fds(fd_out, fd[0]);
		return (run(env, exec));
	}
	else
	{
		close(fd[0]);
		waitpid(pid, &status, 0);
		return (status / 256);
	}
}

int	main(int argc, char **argv, char **env)
{
	char	*file;
	int		fd_pipe[2];
	char	**call;
	int		status;

	if (argc != 5)
		return (1);
	pipe(fd_pipe);
	call = ft_split(argv[2], ' ');
	status = create_first_children(call, env, fd_pipe, argv[1]);
	free_tab((void **)call, &free);
	if (status != 0)
	{
		close(fd_pipe[1]);
		close(fd_pipe[0]);
		return (status);
	}
	call = ft_split(argv[3], ' ');
	status = create_second_children(call, env, fd_pipe, argv[4]);
	free_tab((void **)call, &free);
	return (status);
}
